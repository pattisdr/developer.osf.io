# /nodes/{node_id}/registrations/
get:
  summary: List all registrations
  description: >-
    List of all registrations of the given node.


    #### Returns


    Returns a JSON object containing `data` and `links` keys.


    The `data` key contains an array of up to 10 registrations.
    Each resource in the array is a separate registrations object.


    The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).


    #### Filtering


    You can optionally request that the response only include registrations that match your filters by utilizing the filter query parameter, e.g. https://api.osf.io/v2/registrations/?filter[title]=open.


    Registrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.


    You can learn more about advanced filtering features [here](#tag/Filtering).


  parameters:
    - in: path
      name: node_id
      type: string
      required: true
      description: 'The unique identifier of the node.'

  tags:
    - Nodes

  operationId: nodes_registrations_list
  x-response-schema: Registration
  responses:
    '200':
      description: 'OK'
      schema:
        type: array
        items:
          $ref: '../registrations/definition.yaml'
      examples:
        application/json:
          data:
            relationships:
              files:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/files/
                    meta: {}
              view_only_links:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/view_only_links/
                    meta: {}
              citation:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/citation/
                    meta: {}
              registration_schema:
                links:
                  related:
                    href: https://api.osf.io/v2/metaschemas/registrations/564d31db8c5e4a7c9694b2be/
                    meta: {}
              logs:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/logs/
                    meta: {}
              contributors:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/contributors/
                    meta: {}
              forks:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/forks/
                    meta: {}
              root:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/
                    meta: {}
              identifiers:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/identifiers/
                    meta: {}
              comments:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/comments/?filter%5Btarget%5D=esa63
                    meta: {}
              registered_from:
                links:
                  related:
                    href: https://api.osf.io/v2/nodes/dpfyv/
                    meta: {}
              linked_registrations:
                links:
                  self:
                    href: https://api.osf.io/v2/registrations/esa63/relationships/linked_registrations/
                    meta: {}
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/linked_registrations/
                    meta: {}
              registered_by:
                links:
                  related:
                    href: https://api.osf.io/v2/users/ztdnp/
                    meta: {}
              linked_nodes:
                links:
                  self:
                    href: https://api.osf.io/v2/registrations/esa63/relationships/linked_nodes/
                    meta: {}
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/linked_nodes/
                    meta: {}
              wikis:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/wikis/
                    meta: {}
              affiliated_institutions:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/institutions/
                    meta: {}
              children:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/children/
                    meta: {}
            links:
              self: https://api.osf.io/v2/registrations/esa63/
              html: https://osf.io/esa63/
            attributes:
              registration_supplement: Open-Ended Registration
              pending_embargo_approval: false
              registration: true
              embargo_end_date:
              withdrawn: false
              withdrawal_justification:
              category: project
              preprint: false
              current_user_permissions:
              - read
              title: How Awareness Impacts Multiple Forms of Social Bias in Behavior (Final
                Data Collection and Analysis Plan)
              registered_meta:
                summary:
                  comments: []
                  value: This pre-registration is an updated data collection and analysis plan.
                    See https://osf.io/ptcqw/ for original data collection rule and https://osf.io/8jyu8/
                    for original analysis plan. We are collecting more data given that results
                    after original data collection were inconclusive.
                  extra: []
              public: true
              fork: false
              description: ''
              tags: []
              collection: false
              current_user_can_comment: true
              pending_registration_approval: false
              date_modified: '2017-02-12T19:22:26.488000'
              date_registered: '2017-02-12T19:28:48.864000'
              node_links:
                links:
                  related:
                    href: https://api.osf.io/v2/registrations/esa63/node_links/
                    meta: {}
              date_created: '2017-02-12T18:45:55.063000'
              pending_withdrawal: false
              node_license:
            type: registrations
            id: esa63

# /nodes/{node_id}/registrations/
post:
  summary: Create a registration
  description: >-
    Finalize the registration process of the current draft registration.
    A registration is created from a completed draft registration (containing the supplemental registration questions).
    It also needs information about whether the registration will become public immediately or be embargoed, and conditionally, the datetime at which the registration will become public.


    Refer to step 1: [How to create a draft registration](#operation/nodes_draft_registrations_create)


    Refer to step 2: [How to complete the supplemental registration questions of a draft registration](#operation/nodes_draft_registrations_partial_update)


    A registration is a frozen version of the project that can never be edited or deleted, but can be withdrawn.
    Your original project remains editable but will now have the registration linked to it.

    #### Permissions

    Only project administrators may create registrations.

    #### Required

    Required fields for creating a registration include:


    &nbsp;&nbsp;&nbsp;&nbsp;`draft_registration`


    &nbsp;&nbsp;&nbsp;&nbsp;`registration_choice`


    &nbsp;&nbsp;&nbsp;&nbsp;`lift_embargo` (Only required when `registration_choice` is "embargo")


    #### Returns

    Returns a JSON object with a `data` key containing the representation of the created
    registration, if the request is successful.


    If the request is unsuccessful, an `errors` key containing
    information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes)
    to understand why this request may have failed.

  parameters:
    - in: path
      type: string
      name: node_id
      required: true
      description: 'The unique identifier of the node.'
    - in: body
      name: body
      required: true
      schema:
        $ref: '../registrations/definition.yaml'
  tags:
    - Nodes
  operationId: nodes_registrations_create
  x-response-schema: Registration
  consumes:
    - application/json
  responses:
    '201':
      description: 'Created'
